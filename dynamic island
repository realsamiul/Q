<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premium Dynamic Island Navigation</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollToPlugin.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/CustomEase.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/TextPlugin.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        /* Global CSS - Can be extracted to global.css */
        :root {
            --island-bg: rgba(0, 0, 0, 0.9);
            --island-border: rgba(255, 255, 255, 0.08);
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.85);
            --accent-blue: #0A84FF;
            --backdrop-blur: blur(20px);
            --island-height: 2.5rem;
            --island-padding: 0.5rem 1rem;
            --island-width-collapsed: 7rem;
            --island-width-expanded: 10rem;
        }

        * { 
            box-sizing: border-box; 
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overscroll-behavior: none;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            min-height: 100vh;
        }

        /* Auto-detected sections */
        section[data-nav-section],
        .nav-section {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: clamp(2rem, 8vw, 6rem);
            font-weight: 600;
            color: white;
            position: relative;
        }

        section[data-nav-section]::before,
        .nav-section::before {
            content: '';
            position: absolute;
            inset: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 70%);
            opacity: 0;
            transition: opacity 0.8s ease;
        }

        section[data-nav-section].active::before,
        .nav-section.active::before {
            opacity: 1;
        }

        /* Navigation Container */
        .nav-container {
            position: fixed;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 1rem;
            pointer-events: none;
        }

        /* Dynamic Island - Compact */
        .dynamic-island {
            position: relative;
            background: var(--island-bg);
            backdrop-filter: var(--backdrop-blur);
            -webkit-backdrop-filter: var(--backdrop-blur);
            border: 1px solid var(--island-border);
            border-radius: calc(var(--island-height) / 2);
            height: var(--island-height);
            padding: var(--island-padding);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            pointer-events: all;
            cursor: pointer;
            will-change: width;
            box-shadow: 
                0 0 0 0.5px rgba(255, 255, 255, 0.05),
                0 10px 40px rgba(0, 0, 0, 0.4),
                0 2px 8px rgba(0, 0, 0, 0.3);
            width: var(--island-width-collapsed);
            transition: none;
        }

        .dynamic-island.expanded {
            width: var(--island-width-expanded);
            padding: 0.5rem 0.75rem;
        }

        .dynamic-island:hover {
            box-shadow: 
                0 0 0 0.5px rgba(255, 255, 255, 0.08),
                0 20px 60px rgba(0, 0, 0, 0.5),
                0 4px 12px rgba(0, 0, 0, 0.4);
        }

        /* Text Container - Simplified */
        .island-text {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            flex: 1;
            height: 1.25rem;
            overflow: hidden;
            min-width: 0;
        }

        .text-content {
            color: var(--text-primary);
            font-weight: 500;
            font-size: 0.75rem;
            letter-spacing: 0.08em;
            text-transform: uppercase;
            white-space: nowrap;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
        }

        /* Glitch effect */
        @keyframes glitch {
            0%, 100% {
                text-shadow: 
                    0.02em 0 0 rgba(255, 0, 0, 0.75),
                    -0.02em -0 0 rgba(0, 255, 255, 0.75);
            }
            50% {
                text-shadow: 
                    0.02em 0.01em 0 rgba(255, 0, 0, 0.75),
                    -0.01em -0.02em 0 rgba(0, 255, 255, 0.75);
            }
        }

        .text-content.glitching {
            animation: glitch 0.3s infinite;
        }

        /* Navigation Arrows */
        .nav-arrow {
            width: 1.25rem;
            height: 1.25rem;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.12);
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            scale: 0.6;
            pointer-events: none;
            backdrop-filter: var(--backdrop-blur);
            -webkit-backdrop-filter: var(--backdrop-blur);
            flex-shrink: 0;
            transition: background 0.2s;
        }

        .expanded .nav-arrow {
            display: flex;
        }

        .nav-arrow:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        .nav-arrow:active {
            transform: scale(0.9);
        }

        .nav-arrow svg {
            width: 0.5rem;
            height: 0.5rem;
            stroke: var(--text-primary);
            stroke-width: 2.5;
            stroke-linecap: round;
            stroke-linejoin: round;
        }

        .nav-arrow.prev svg {
            transform: rotate(180deg);
        }

        /* Menu Button - Page Navigation */
        .menu-button {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--accent-blue), #0051D5);
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 
                0 2px 8px rgba(10, 132, 255, 0.3),
                inset 0 1px 1px rgba(255, 255, 255, 0.2);
            pointer-events: all;
            position: relative;
        }

        .menu-button:hover {
            box-shadow: 
                0 4px 16px rgba(10, 132, 255, 0.5),
                inset 0 1px 1px rgba(255, 255, 255, 0.2);
        }

        .menu-button:active {
            transform: scale(0.95);
        }

        .hamburger {
            width: 1rem;
            height: 0.875rem;
            position: relative;
        }

        .hamburger span {
            position: absolute;
            left: 0;
            width: 100%;
            height: 2px;
            background: white;
            border-radius: 2px;
            transition: all 0.3s ease;
        }

        .hamburger span:nth-child(1) { top: 0; }
        .hamburger span:nth-child(2) { top: 50%; transform: translateY(-50%); }
        .hamburger span:nth-child(3) { bottom: 0; }

        .menu-open .hamburger span:nth-child(1) { 
            transform: rotate(45deg) translate(3.5px, 3.5px); 
        }
        .menu-open .hamburger span:nth-child(2) { 
            opacity: 0; 
            transform: translateY(-50%) scaleX(0); 
        }
        .menu-open .hamburger span:nth-child(3) { 
            transform: rotate(-45deg) translate(3.5px, -3.5px); 
        }

        /* Menu Panel - Page Navigation */
        .menu-panel {
            position: absolute;
            bottom: calc(100% + 1rem);
            right: 0;
            background: var(--island-bg);
            backdrop-filter: var(--backdrop-blur);
            -webkit-backdrop-filter: var(--backdrop-blur);
            border: 1px solid var(--island-border);
            border-radius: 1rem;
            padding: 0.5rem;
            opacity: 0;
            scale: 0.8;
            pointer-events: none;
            transform-origin: bottom right;
            box-shadow: 
                0 0 0 0.5px rgba(255, 255, 255, 0.05),
                0 20px 60px rgba(0, 0, 0, 0.4);
            will-change: transform, opacity;
        }

        .menu-item {
            display: block;
            color: var(--text-secondary);
            text-decoration: none;
            padding: 0.625rem 1.25rem;
            border-radius: 0.5rem;
            font-weight: 500;
            font-size: 0.75rem;
            letter-spacing: 0.06em;
            text-transform: uppercase;
            white-space: nowrap;
            min-width: 6rem;
            text-align: center;
            transition: all 0.2s;
        }

        .menu-item:hover {
            background: rgba(255, 255, 255, 0.08);
            color: var(--text-primary);
        }

        .menu-item.active {
            background: linear-gradient(135deg, var(--accent-blue), #0051D5);
            color: white;
        }

        /* Progress Indicator */
        .progress-indicator {
            position: absolute;
            bottom: -0.375rem;
            left: 50%;
            transform: translateX(-50%);
            width: 2rem;
            height: 0.125rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 0.125rem;
            overflow: hidden;
            opacity: 0.8;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--accent-blue), #0051D5);
            border-radius: 0.125rem;
            width: 20%;
            box-shadow: 0 0 6px rgba(10, 132, 255, 0.5);
        }

        /* Glow Effect */
        @keyframes glow {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 0.6; }
        }

        .dynamic-island::before {
            content: '';
            position: absolute;
            inset: -1px;
            background: linear-gradient(135deg, transparent, rgba(10, 132, 255, 0.15), transparent);
            border-radius: inherit;
            opacity: 0;
            pointer-events: none;
        }

        .dynamic-island.expanded::before {
            animation: glow 2s ease-in-out infinite;
        }
    </style>
</head>
<body>
    <!-- Content Sections - Automatically detected -->
    <section data-nav-section data-nav-title="Home">
        <h1>Home</h1>
    </section>
    <section data-nav-section data-nav-title="About">
        <h1>About</h1>
    </section>
    <section data-nav-section data-nav-title="Work">
        <h1>Work</h1>
    </section>
    <section data-nav-section data-nav-title="Services">
        <h1>Services</h1>
    </section>
    <section data-nav-section data-nav-title="Contact">
        <h1>Contact</h1>
    </section>

    <!-- Navigation -->
    <nav class="nav-container">
        <div class="dynamic-island" id="dynamicIsland">
            <button class="nav-arrow prev" id="prevBtn">
                <svg viewBox="0 0 24 24" fill="none">
                    <path d="M15 18L9 12L15 6" stroke="currentColor"/>
                </svg>
            </button>

            <div class="island-text" id="islandText">
                <span class="text-content">HOME</span>
            </div>

            <button class="nav-arrow next" id="nextBtn">
                <svg viewBox="0 0 24 24" fill="none">
                    <path d="M9 18L15 12L9 6" stroke="currentColor"/>
                </svg>
            </button>

            <div class="progress-indicator">
                <div class="progress-bar" id="progressBar"></div>
            </div>
        </div>

        <!-- Menu Button - Page Navigation -->
        <button class="menu-button" id="menuButton">
            <div class="hamburger">
                <span></span>
                <span></span>
                <span></span>
            </div>
            
            <!-- Menu Panel for page navigation -->
            <div class="menu-panel" id="menuPanel">
                <a href="/" class="menu-item active">Home</a>
                <a href="/about" class="menu-item">About</a>
                <a href="/portfolio" class="menu-item">Portfolio</a>
                <a href="/services" class="menu-item">Services</a>
                <a href="/blog" class="menu-item">Blog</a>
                <a href="/contact" class="menu-item">Contact</a>
                <a href="/resume" class="menu-item">Resume</a>
            </div>
        </button>
    </nav>

    <script>
        // Register GSAP plugins
        gsap.registerPlugin(ScrollToPlugin, TextPlugin);
        gsap.config({ trialWarn: false });

        // Custom eases
        CustomEase.create("expandEase", "M0,0 C0.25,0.1 0.39,0.29 0.62,0.62 0.83,0.84 1,1 1,1");

        class ScrambleText {
            constructor(element) {
                this.element = element;
                this.chars = "!#$%&'()*+,-./:;<=>?@[]^_`{|}~";
                this.originalText = element.textContent;
            }

            scramble(newText, duration = 0.8) {
                const oldText = this.element.textContent;
                const maxLength = Math.max(oldText.length, newText.length);
                const scrambleDuration = duration * 0.8;
                
                let frame = 0;
                const totalFrames = scrambleDuration * 60; // 60fps
                
                const scrambleInterval = setInterval(() => {
                    frame++;
                    const progress = frame / totalFrames;
                    
                    let scrambled = '';
                    for (let i = 0; i < maxLength; i++) {
                        if (i < newText.length * progress) {
                            scrambled += newText[i];
                        } else if (i < maxLength) {
                            scrambled += this.chars[Math.floor(Math.random() * this.chars.length)];
                        }
                    }
                    
                    this.element.textContent = scrambled.substring(0, maxLength);
                    
                    if (frame >= totalFrames) {
                        clearInterval(scrambleInterval);
                        this.element.textContent = newText;
                    }
                }, 1000 / 60);
                
                return scrambleInterval;
            }
        }

        class DynamicIslandNav {
            constructor() {
                // Auto-detect sections
                this.sections = document.querySelectorAll('[data-nav-section], .nav-section');
                this.island = document.getElementById('dynamicIsland');
                this.textElement = document.querySelector('.text-content');
                this.prevBtn = document.getElementById('prevBtn');
                this.nextBtn = document.getElementById('nextBtn');
                this.menuButton = document.getElementById('menuButton');
                this.menuPanel = document.getElementById('menuPanel');
                this.menuItems = this.menuPanel.querySelectorAll('.menu-item');
                this.progressBar = document.getElementById('progressBar');

                this.scrambler = new ScrambleText(this.textElement);
                
                this.state = {
                    currentIndex: 0,
                    isExpanded: false,
                    isMenuOpen: false,
                    isAnimating: false,
                    idleTimeout: null,
                    scrambleInterval: null,
                    morphTimeout: null
                };

                this.processSections();
                this.init();
            }

            processSections() {
                this.sections.forEach((section, index) => {
                    section.dataset.index = index;
                    
                    if (!section.dataset.navTitle) {
                        const heading = section.querySelector('h1, h2, h3');
                        if (heading) {
                            section.dataset.navTitle = heading.textContent.trim();
                        } else {
                            section.dataset.navTitle = `Section ${index + 1}`;
                        }
                    }
                });
            }

            init() {
                this.setupEventListeners();
                this.setupIntersectionObserver();
                this.updateProgress();
                
                // Set initial text
                const firstTitle = this.sections[0].dataset.navTitle.toUpperCase();
                this.textElement.textContent = firstTitle;
                
                // Start idle animation
                this.startIdleAnimation();
                
                this.updatePageMenu();
            }

            startIdleAnimation() {
                // Clear any existing timeout
                if (this.state.morphTimeout) {
                    clearTimeout(this.state.morphTimeout);
                }

                // Only animate when not expanded and not in menu
                if (!this.state.isExpanded && !this.state.isMenuOpen) {
                    this.state.morphTimeout = setTimeout(() => {
                        if (!this.state.isExpanded && !this.state.isMenuOpen) {
                            this.glitchText();
                            this.startIdleAnimation();
                        }
                    }, 3000 + Math.random() * 2000);
                }
            }

            glitchText() {
                const currentText = this.textElement.textContent;
                const glitchChars = "!@#$%^&*()_+";
                
                // Add glitch class for visual effect
                this.textElement.classList.add('glitching');
                
                // Quick glitch animation
                let glitchCount = 0;
                const glitchInterval = setInterval(() => {
                    if (glitchCount < 5) {
                        let glitched = '';
                        for (let i = 0; i < currentText.length; i++) {
                            if (Math.random() < 0.1) {
                                glitched += glitchChars[Math.floor(Math.random() * glitchChars.length)];
                            } else {
                                glitched += currentText[i];
                            }
                        }
                        this.textElement.textContent = glitched;
                        glitchCount++;
                    } else {
                        clearInterval(glitchInterval);
                        this.textElement.textContent = currentText;
                        this.textElement.classList.remove('glitching');
                    }
                }, 50);
            }

            updateText(newText) {
                if (this.state.isAnimating) return;
                this.state.isAnimating = true;

                // Clear any existing scramble
                if (this.state.scrambleInterval) {
                    clearInterval(this.state.scrambleInterval);
                }

                // Stop idle animation during text change
                if (this.state.morphTimeout) {
                    clearTimeout(this.state.morphTimeout);
                }

                // Scramble to new text
                this.state.scrambleInterval = this.scrambler.scramble(newText.toUpperCase(), 0.6);
                
                setTimeout(() => {
                    this.state.isAnimating = false;
                    if (!this.state.isExpanded) {
                        this.startIdleAnimation();
                    }
                }, 600);
            }

            updatePageMenu() {
                const currentPath = window.location.pathname;
                this.menuItems.forEach(item => {
                    const itemPath = new URL(item.href).pathname;
                    item.classList.toggle('active', itemPath === currentPath);
                });
            }

            setupEventListeners() {
                // Island expansion
                this.island.addEventListener('click', (e) => {
                    if (!e.target.closest('.nav-arrow')) {
                        this.toggleExpanded(!this.state.isExpanded);
                    }
                });

                // Menu button
                this.menuButton.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.toggleMenu();
                });

                // Navigation arrows
                this.prevBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.navigateToSection(this.state.currentIndex - 1);
                    this.resetIdleTimer();
                });

                this.nextBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.navigateToSection(this.state.currentIndex + 1);
                    this.resetIdleTimer();
                });

                // Click outside
                document.addEventListener('click', (e) => {
                    if (!this.island.contains(e.target) && !this.menuButton.contains(e.target)) {
                        this.toggleExpanded(false);
                        this.toggleMenu(false);
                    }
                });

                // Keyboard navigation
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') {
                        this.navigateToSection(this.state.currentIndex - 1);
                    } else if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {
                        this.navigateToSection(this.state.currentIndex + 1);
                    } else if (e.key === 'Escape') {
                        this.toggleExpanded(false);
                        this.toggleMenu(false);
                    }
                });

                // Touch gestures
                let touchStartY = 0;
                this.island.addEventListener('touchstart', (e) => {
                    touchStartY = e.touches[0].clientY;
                });

                this.island.addEventListener('touchend', (e) => {
                    const touchEndY = e.changedTouches[0].clientY;
                    const diff = touchStartY - touchEndY;
                    if (Math.abs(diff) > 50) {
                        this.navigateToSection(this.state.currentIndex + (diff > 0 ? 1 : -1));
                    }
                });
            }

            setupIntersectionObserver() {
                const observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach(entry => {
                            if (entry.isIntersecting) {
                                const index = parseInt(entry.target.dataset.index);
                                if (index !== this.state.currentIndex) {
                                    this.updateCurrentSection(index);
                                }
                            }
                        });
                    },
                    { threshold: 0.6 }
                );

                this.sections.forEach(section => observer.observe(section));
            }

            updateCurrentSection(index) {
                this.state.currentIndex = index;
                const section = this.sections[index];
                const title = section.dataset.navTitle;
                
                this.updateText(title);
                
                this.sections.forEach(s => s.classList.remove('active'));
                section.classList.add('active');
                
                this.updateProgress();
            }

            resetIdleTimer() {
                if (this.state.idleTimeout) {
                    clearTimeout(this.state.idleTimeout);
                }

                if (this.state.isExpanded) {
                    this.state.idleTimeout = setTimeout(() => {
                        this.toggleExpanded(false);
                    }, 5000);
                }
            }

            toggleExpanded(shouldExpand) {
                this.state.isExpanded = shouldExpand;

                if (shouldExpand) {
                    this.island.classList.add('expanded');
                    this.resetIdleTimer();
                    // Stop idle animation when expanded
                    if (this.state.morphTimeout) {
                        clearTimeout(this.state.morphTimeout);
                    }
                } else {
                    this.island.classList.remove('expanded');
                    if (this.state.idleTimeout) {
                        clearTimeout(this.state.idleTimeout);
                    }
                    // Restart idle animation when collapsed
                    this.startIdleAnimation();
                }

                // Smooth width transition
                gsap.to(this.island, {
                    width: shouldExpand ? 'var(--island-width-expanded)' : 'var(--island-width-collapsed)',
                    duration: 0.4,
                    ease: "expandEase"
                });

                // Arrow animations
                gsap.to([this.prevBtn, this.nextBtn], {
                    opacity: shouldExpand ? 1 : 0,
                    scale: shouldExpand ? 1 : 0.6,
                    pointerEvents: shouldExpand ? 'all' : 'none',
                    duration: 0.3,
                    ease: "power2.inOut",
                    stagger: shouldExpand ? 0.05 : 0
                });
            }

            toggleMenu(force = null) {
                const shouldOpen = force !== null ? force : !this.state.isMenuOpen;
                this.state.isMenuOpen = shouldOpen;

                this.menuButton.classList.toggle('menu-open', shouldOpen);

                gsap.to(this.menuPanel, {
                    opacity: shouldOpen ? 1 : 0,
                    scale: shouldOpen ? 1 : 0.8,
                    pointerEvents: shouldOpen ? 'all' : 'none',
                    duration: 0.3,
                    ease: "power2.inOut"
                });

                if (shouldOpen) {
                    gsap.fromTo(this.menuItems, 
                        { y: 10, opacity: 0 },
                        { y: 0, opacity: 1, duration: 0.3, stagger: 0.03, delay: 0.1 }
                    );
                }
            }

            navigateToSection(index) {
                if (this.state.isAnimating) return;
                
                const clampedIndex = Math.max(0, Math.min(this.sections.length - 1, index));
                if (clampedIndex === this.state.currentIndex) return;

                gsap.to(window, {
                    scrollTo: {
                        y: this.sections[clampedIndex],
                        autoKill: false
                    },
                    duration: 1,
                    ease: "power2.inOut"
                });
            }

            updateProgress() {
                const progress = ((this.state.currentIndex + 1) / this.sections.length) * 100;
                
                gsap.to(this.progressBar, {
                    width: `${progress}%`,
                    duration: 0.6,
                    ease: "power2.inOut"
                });
            }
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            window.dynamicIslandNav = new DynamicIslandNav();
        });
    </script>
</body>
</html>